    1  sudo qpt upgrade
    2  sudo apt upgrade
    3  sudo apt install --reinstall gnome-terminal
    4  echo $SHELL
    5  gnome-terminal
    6  echo $DISPLAY
    7  export DISPLAY=:0
    8  xclock 
    9  gnome-terminal
   10  sudo apt update
   11  sudo apt install dbus-x11
   12  gnome-terminal
   13  sudo apt update
   14  sudo -u
   15  sudo u
   16  sudo adduser qroyo
   17  su -
   18  dconf reset -f /org/gnome/terminal/
   19  sudo --fix-broken install
   20  sudo apt --fix-broken install
   21  gnome-terminal
   22  sudo apt install github
   23  sudo apt install git
   24  ls
   25  cd Documents/
   26  ls
   27  git clone git@github.com:ludmattern/IoT.git
   28  ssh-keygen -t rsa -b 4096 -C "royo.quentin@gmail.com"
   29  cat ~/.ssh/id_ed25519.pub
   30  cat ~/.ssh/id_rsa.pub
   31  ssh -T git@github.com
   32  git clone git@github.com:ludmattern/IoT.git
   33  cd IoT/
   34  ls
   35  cd p3
   36  ls
   37  install.sh
   38  bash install.sh 
   39  vim install.sh 
   40  cat install.sh 
   41  sudo systemctl status docker
   42  sudo systemctl start docker
   43  bash install.sh 
   44  bash install_docker.sh 
   45  ls
   46  bash install.sh 
   47  bash install_docker.sh 
   48  bash install.sh 
   49  curl -fsSL https://get.docker.com | sudo sh
   50  sudo usermod -aG docker $USER
   51  cd Documents/
   52  ls
   53  cd IoT/p3
   54  bash install.sh 
   55  sudo apt install docker
   56  curl -fsSL https://get.docker.com | sudo sh
   57  bash install.sh 
   58  cd Documents/
   59  cd IoT/p3
   60  bash install.sh 
   61  su -
   62  ls
   63  cd
   64  ls
   65  getent group docker
   66  docker info
   67  ls
   68  cd Documents/
   69  cd IoT/
   70  cd p3
   71  ls
   72  make
   73  history
   74  make
   75  ls
   76  make install-docker
   77  mae
   78  make
   79  cd ..
   80  mkdir bonus 
   81  cp p3/* bonus/
   82  cp -r p3/* bonus/
   83  cd bonus 
   84  ls
   85  cd apps 
   86  ls
   87  cd ..
   88  ls
   89  cat argocd-server-lb.yaml 
   90  ls
   91  cd argocd
   92  ls
   93  cat app.yaml 
   94  cd ..
   95  cd 
   96  cd Documents/
   97  cd IoT/
   98  cd p3
   99  make
  100  make bonus
  101  make bonus-status 
  102  kubectl get pods -n gitlab
  103  kubectl get applications.gitoproj.io -n argocd
  104  ls
  105  kubectl get apps.gitoproj.io -n argocd
  106  make bonus
  107  make bonus-status
  108  kubectl get applications.gitoproj.io -n argocd
  109  cd ../bonus
  110  kubectl get applications.gitoproj.io -n argocd
  111  kubectl get crds | grep applications
  112  kubectl get application -n argocd
  113  kubectl describe application gitlab -n argocd
  114  make bonus
  115  cd ..
  116  cd p3
  117  make bonus
  118  make bonus-status
  119  cd ..
  120  cd bonus
  121  make
  122  make bonus-status 
  123  kubectl get applications.gitoproj.io -n argocd
  124  kubectl get crds | grep applications
  125  kubectl get application -n argocd
  126  kubectl describe application gitlab -n argocd
  127  make bonus-status
  128  make bonus
  129  make
  130  make bonus-status
  131  kubectl get pods -n gitlab -w
  132  kubectl logs -n gitlab gitlab-gitlab-upgrade-check-nr9f4
  133  kubectl delete namespace gitlab
  134  kubectl create namespace gitlab
  135  kubectl delete application gitlab -n argocd
  136  kubectl apply -f ./bonus/gitlab-application.yaml
  137  ip addr show
  138  ip -4 addr show | grep inet
  139  make bonus
  140  make
  141  kubectl get pods -n gitlab
  142  make bonus-status
  143  kubectl describe application gitlab -n argocd
  144  make
  145  make bonus-status
  146  kubectl describe application gitlab -n argocd
  147  kubectl delete namespace gitlab
  148  kubectl delete application gitlab -n argocd
  149  make bonus
  150  make bonus-status
  151  make
  152  kubectl describe application gitlab -n argocd
  153  kubectl delete namespace gitlab
  154  kubectl delete application gitlab -n argocd
  155  make clean
  156  make
  157  make describe
  158  kubectl get ns gitlab
  159  kubectl get all -n gitlab
  160  kubectl get events -n gitlab --sort-by='.metadata.creationTimestamp'
  161  kubectl logs -n argocd deploy/argocd-application-controller
  162  kubectl get pods -n argocd
  163  kubectl get application gitlab -n argocd
  164  kubectl describe application gitlab -n argocd
  165  kubectl get all -n gitlab
  166  kubectl get pvc -n gitlab
  167  make clean
  168  make
  169  make bonus-status
  170  make describe
  171  kubectl get all -n gitlab
  172  kubectl get pvc -n gitlab
  173  kubectl get all -n gitlab
  174  kubectl get pvc -n gitlab
  175  kubectl get all -n gitlab
  176  kubectl get pvc -n gitlab
  177  helm search repo gitlab --versions
  178  sudo snap install helm
  179  sudo snap install helm --classic
  180  helm search repo gitlab --versions
  181  make clean
  182  make
  183  ls
  184  make bonus-status
  185  helm search repo gitlab --versions
  186  helm repo add gitlab https://charts.gitlab.io/
  187  helm repo update
  188  helm search repo gitlab --versions
  189  make clean
  190  make
  191  make describe
  192  helm repo add gitlab https://charts.gitlab.io/
  193  helm repo update
  194  helm search repo gitlab --versions  >> text
  195  make 
  196  make bonus-status
  197  kubectl get ns gitlab
  198  kubectl get all -n gitlab
  199  kubectl logs -n argocd deploy/argocd-application-controller
  200  argocd app sync gitlab
  201  kubectl get events -n gitlab --sort-by='.metadata.creationTimestamp'
  202  kubectl logs -n gitlab pod/gitlab-gitlab-upgrade-check-gwwrp
  203  kubectl get pods -n gitlab
  204  kubectl logs -n gitlab <nom-du-pod> | grep "GitLab version"
  205  kubectl logs -n gitlab <gitlab> | grep "GitLab version"
  206  kubectl describe pod <nom-du-pod> -n gitlab | grep Image
  207  kubectl get pods -n gitlab
  208  kubectl describe pod gitlab-gitlab-upgrade-check-gwwrp -n gitlab | grep Image
  209  kubectl logs -n gitlab gitlab-gitlab-upgrade-check-gwwrp | grep "GitLab version"
  210  kubectl get pods -n gitlab
  211  clear
  212  kubectl get pods -n gitlab
  213  kubectl describe pod gitlab-gitlab-upgrade-check-gwwrp -n gitlab | grep Image
  214  kubectl describe pod gitlab-gitlab-upgrade-check-jvtk4 -n gitlab | grep Image
  215  kubectl describe pod gitlab-gitlab-upgrade-check-k9b8m -n gitlab | grep Image
  216  kubectl get pods -n gitlab --show-labels
  217  kubectl get deployments -n gitlab
  218  kubectl get statefulsets -n gitlab
  219  kubectl delete jobs -n gitlab -l app=gitlab
  220  kubectl delete pods -n gitlab -l app=gitlab
  221  kubectl delete job -n gitlab gitlab-gitlab-upgrade-check
  222  kubectl delete pod -n gitlab -l app=gitlab
  223  clear
  224  make
  225  make bonus-status
  226  kubectl delete job -n gitlab gitlab-gitlab-upgrade-check
  227  kubectl delete pods -n gitlab -l app=gitlab
  228  make bonus-status
  229  make clean
  230  cd Documents/
  231  cd IoT
  232  cd bonus
  233  kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 -d
  234  kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-application-controller
  235  kubectl logs -n argocd argocd-application-controller-0 | grep gitlab
  236  cd Documents/
  237  cd IoT/
  238  cd p3
  239  make
  240  make clean
  241  make
  242  cd ../bonus
  243  make
  244  make bonus-status
  245  make describe
  246  make bonus-status
  247  kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-repo-server
  248  kubectl logs -n argocd -l app.kubernetes.io/name=argocd-repo-server
  249  make bonus-status
  250  make describe 
  251  make bonus-status
  252  kubectl describe application gitlab -n argocd
  253  kubectl get all -n gitlab
  254  kubectl describe application gitlab -n argocd | grep error
  255  kubectl describe application gitlab -n argocd | grep "error"
  256  kubectl describe application gitlab -n argocd | grep "fail"
  257  kubectl describe application gitlab -n argocd
  258  kubectl get application gitlab -n argocd -o yaml
  259  cleR
  260  CLEAR
  261  clear
  262  CLEAR
  263  clear
  264  kubectl get application gitlab -n argocd -o yaml
  265  kubectl logs -n argocd -l app.kubernetes.io/name=argocd-application-controller
  266  make clean
  267  cd ..
  268  cd p3
  269  make clean
  270  make
  271  cd ../bonus
  272  make
  273  make bonus-status
  274  make describe
  275  make clean
  276  make describe
  277  make
  278  make describe
  279  make bonus-status
  280  kubectl get namespace gitlab
  281  kubectl logs -n argocd <nom-du-pod-du-controller-argocd> | grep gitlab
  282  argocd-application-controller
  283  helm template gitlab gitlab/gitlab --version 9.2.1 -f values.yaml
  284  clear
  285  kubectl get application gitlab -n argocd -o yaml
  286  kubectl get pods -n gitlab
  287  kubectl logs -n argocd $(kubectl get pod -n argocd -l app.kubernetes.io/name=argocd-application-controller -o jsonpath='{.items[0].metadata.name}') | grep gitlab
  288  make describe
  289  argocd app logs gitlab
  290  kubectl logs -n argocd $(kubectl get pod -n argocd -l app.kubernetes.io/name=argocd-application-controller -o jsonpath='{.items[0].metadata.name}')
  291  clear
  292  kubectl get namespace gitlab
  293  kubectl get crds | grep 'cert-manager'
  294  helm repo add jetstack https://charts.jetstack.io
  295  helm repo update
  296  helm install cert-manager jetstack/cert-manager   --namespace cert-manager   --create-namespace   --version v1.11.0   --set installCRDs=true
  297  kubectl get pods -n cert-manager
  298  make bonus-status
  299  make clean
  300  make
  301  make bonus-status
  302  make describe
  303  kubectl get namespace gitlab
  304  kubectl get pods -n cert-manager
  305  make describe
  306  kubectl get pods -n cert-manager.
  307  kubectl get pods -n cert-manager
  308  kubectl get pods
  309  argocd app sync gitlab
  310  kubectl get application gitlab -n argocd
  311  make bonus-status
  312  kubectl port-forward svc/argocd-server -n argocd 8080:443
  313  cd bonnus 
  314  cd bonuns
  315  cd bonus
  316  ls
  317  git add .
  318  git status
  319  git commit -m "gitlab introduce"
  320  git push 
  321  make clean
  322  make
  323  make bonus-status
  324  make clean
  325  make
  326  make bonus-status
  327  make clean
  328  make
  329  make clean
  330  make
  331  make clean
  332  make
  333  make bonus-status
  334  make clean
  335  history
  336  kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 -d
  337  kubectl describe job gitlab-gitlab-upgrade-check -n gitlab
  338  kubectl get pods -n gitlab -l job-name=gitlab-gitlab-upgrade-check
  339  ls
  340  cd Documents/
  341  cd IoT/
  342  cd bonus/
  343  make
  344  make clean
  345  make
  346  make bonus-status
  347  kubectl describe job gitlab-gitlab-upgrade-check -n gitlab
  348  kubectl get pods -n gitlab -l job-name=gitlab-gitlab-upgrade-check
  349  kubectl logs -n gitlab gitlab-gitlab-upgrade-check-8zv6k
  350  make
  351  ls
  352  make clean
  353  make
  354  make bonus-status
  355  ls
  356  cd Documents/
  357  ls
  358  cd IoT/
  359  ls
  360  cd p3
  361  make clean
  362  make
  363  cd ../bonus
  364  make
  365  make bonus-status
  366  history
  367  history | grep cert
  368  kubectl get pods -n cert-manager
  369  kubectl get crds | grep 'cert-manager'
  370  helm install cert-manager jetstack/cert-manager   --namespace cert-manager   --create-namespace   --version v1.11.0   --set installCRDs=true
  371  history | grep helm
  372  helm repo update
  373  install cert-manager jetstack/cert-manager   --namespace cert-manager   --create-namespace   --version v1.11.0   --set installCRDs=true
  374  make bonus-status
  375  history
  376  kubectl port-forward svc/argocd-server -n argocd 8080:443
  377  cd bonus
  378  kubectl describe application gitlab -n argocd
  379  kubectl logs job/gitlab-gitlab-upgrade-check -n gitlab
  380  kubectl get pods -n gitlab | grep upgrade-check
  381  kubectl logs <pod-name> -n gitlab
  382  kubectl delete namespace gitlab
  383  make bonus-namespace
  384  make bonus-gitlab
  385  # Supprimer l'application ArgoCD GitLab
  386  kubectl delete application gitlab -n argocd
  387  # Supprimer le namespace GitLab (cela supprime toutes les ressources GitLab)
  388  kubectl delete namespace gitlab
  389  # (Optionnel) Attendre que le namespace soit bien supprimé
  390  kubectl get ns
  391  # Réinstaller le namespace et l'application
  392  make bonus-namespace
  393  make bonus-gitlab
  394  make bonus-status
  395  kubectl get crds | grep cert-manager
  396  kubectl delete crd <nom-de-la-crd>
  397  kubectl get crds | grep cert-manager
  398  kubectl delete crd <nom-de-la-crd>
  399  kubectl version --short
  400  kubectl delete crd certificaterequests.cert-manager.io
  401  kubectl delete crd certificates.cert-manager.io
  402  kubectl delete crd challenges.acme.cert-manager.io
  403  kubectl delete crd clusterissuers.cert-manager.io
  404  kubectl delete crd issuers.cert-manager.io
  405  kubectl delete crd orders.acme.cert-manager.io
  406  kubectl version
  407  kubectl delete application gitlab -n argocd
  408  kubectl delete namespace gitlab
  409  make bonus-namespace
  410  make bonus-gitlab
  411  make bonus-status
  412  kubectl delete application gitlab -n argocd
  413  kubectl delete namespace gitlab
  414  make bonus-namespace
  415  make bonus-gitlab
  416  make bonus-status
  417  make clean
  418  make
  419  make bonus-status
  420  kubectl get jobs -n gitlab
  421  kubectl get ns gitlab
  422  kubectl get namespace gitlab -o json > tmp-gitlab-ns.json
  423  # Édite le fichier et supprime la section "finalizers"
  424  nano tmp-gitlab-ns.json
  425  # (Supprime la ligne "finalizers": [...] et son contenu)
  426  kubectl replace --raw "/api/v1/namespaces/gitlab/finalize" -f ./tmp-gitlab-ns.json
  427  kubectl get ns
  428  make clean
  429  kubectl get ns
  430  make clean
  431  kubectl get ns
  432  history | grep forecast
  433  history | grep helm
  434  history | grep cast
  435  history
  436  kubectl port-forward svc/argocd-server -n argocd 8080:443
  437  kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 -d
  438  cd Documents/
  439  cd IoT/
  440  cd bonus/
  441  make bonus-status
  442  [A
  443  make bonus-status
  444  make describe
  445  make clean
  446  make bonus-status
  447  kubectl get namespace gitlab -o json > tmp-gitlab-ns.json
  448  # Édite le fichier et supprime la section "finalizers"
  449  nano tmp-gitlab-ns.json
  450  # (Supprime la ligne "finalizers": [...] et son contenu)
  451  kubectl replace --raw "/api/v1/namespaces/gitlab/finalize" -f ./tmp-gitlab-ns.json
  452  kubectl get ns
  453  kubectl get namespace gitlab -o json > tmp-gitlab-ns.json
  454  nano tmp-gitlab-ns.json
  455  kubectl replace --raw "/api/v1/namespaces/gitlab/finalize" -f ./tmp-gitlab-ns.json
  456  kubectl get ns
  457  make bonus-gitlab
  458  make
  459  cd bonus
  460  make bonus-gitlab
  461  make bonus-status
  462  kubectl get pods -n gitlab
  463  make bonus-status
  464  make describe
  465  kubectl get ns
  466  make bonus-namespace
  467  make bonus-gitlab
  468  make bonus-status
  469  kubectl get pods -n gitlab
  470  kubectl describe application gitlab -n argocd
  471  kubectl get events -n gitlab --sort-by=.metadata.creationTimestamp
  472  kubectl get ns
  473  kubectl describe application gitlab -n argocd
  474  kubectl get events -n gitlab --sort-by=.metadata.creationTimestamp
  475  argocd app sync gitlab
  476  kubectl get pods -n gitlab
  477  kubectl get namespace gitlab -o json > tmp-gitlab-ns.json
  478  nano tmp-gitlab-ns.json
  479  kubectl get ns
  480  kubectl delete application gitlab -n argocd
  481  kubectl delete namespace gitlab
  482  kubectl get applications -n argocd
  483  kubectl patch application gitlab -n argocd -p '{"metadata":{"finalizers":[]}}' --type=merge
  484  kubectl delete application gitlab -n argocd --cascade=false
  485  kubectl get applications -n argocd
  486  kubectl get crds | grep gitlab
  487  kubectl get ns
  488  kubectl get applications -n argocd
  489  kubectl get all -n gitlab
  490  kubectl get crds | grep -E 'gitlab|certmanager'
  491  kubectl get clusterroles,clusterrolebindings | grep gitlab
  492  # Force la suppression du job
  493  kubectl delete job gitlab-gitlab-upgrade-check -n gitlab --force --grace-period=0
  494  # Sauvegarde la définition du namespace
  495  kubectl get namespace gitlab -o json > tmp-gitlab-ns.json
  496  # Édite le fichier pour supprimer les finalizers
  497  nano tmp-gitlab-ns.json
  498  kubectl replace --raw "/api/v1/namespaces/gitlab/finalize" -f ./tmp-gitlab-ns.json
  499  kubectl get ns
  500  kubectl delete application gitlab -n argocd
  501  kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 -d
  502  kubectl get pods -n gitlab
  503  kubectl get svc -A | grep 30080
  504  kubectl get svc -A | grep 30443
  505  history
  506  kubectl port-forward svc/argocd-server -n argocd 8080:443
  507  kubectl get ns
  508  cd ..
  509  cd p3
  510  make clean
  511  kubectl get ns
  512  kubectl get clusterroles,clusterrolebindings | grep gitlab
  513  kubectl get all -n gitlab
  514  cd ..
  515  cd bonus
  516  kubectl get ns
  517  kubectl get clusterroles,clusterrolebindings | grep gitlab
  518  kubectl get all -n gitlab
  519  sudo kubectl get all -n gitlab
  520  kubectl delete application gitlab -n argocd
  521  make bonus-gitlab
  522  kubectl get ns
  523  make bonus-gitlab
  524  cd ..
  525  cd p3
  526  make
  527  cd ..
  528  cd bonus
  529  make 
  530  kubectl get pods -n gitlab
  531  cd ..
  532  cd p3
  533  kubectl get pods -n gitlab
  534  kubectl get pods
  535  cd ..
  536  cd bonus
  537  make bonus-status
  538  make describe
  539  make bonus-status
  540  kubectl get pods -n gitlab
  541  kubectl get events -n gitlab --sort-by=.metadata.creationTimestamp
  542  kubectl describe application gitlab -n argocd
  543  kubectl delete application gitlab -n argocd
  544  make bonus-gitlab
  545  make bonus-status
  546  kubectl delete application gitlab -n argocd
  547  make bonus-gitlab
  548  make bonus-status
  549  kubectl delete application gitlab -n argocd
  550  kubectl delete namespace gitlab --force
  551  kubectl get ns
  552  make bonus-gitlab
  553  make bonus-status
  554  kubectl get pods -n gitlab
  555  view kubectl get pods -n gitlab
  556  help view
  557  view help
  558  view kubectl get pods -n gitlab
  559  kubectl get pods -n gitlab
  560  watch -n 1 kubectl get pods -n gitlab  # rafraîchit toutes les
  561  kubectl get secret gitlab-initial-root-password -n gitlab -o jsonpath="{.data.password}" | base64 --decode ; echo
  562  kubectl get ingress -n gitlab
  563  kubectl get svc -n gitlab
  564  sudo sh -c 'echo "127.0.0.1 gitlab.localhost" >> /etc/hosts'
  565  sudo sh -c 'echo "127.0.0.1 minio.localhost" >> /etc/hosts'
  566  sudo sh -c 'echo "127.0.0.1 kas.localhost" >> /etc/hosts'
  567  curl -I http://gitlab.localhost:30923
  568  sudo curl -I http://gitlab.localhost:30923
  569  kubectl delete application gitlab -n argocd
  570  make bonus-gitlab
  571  watch kubectl get pods -n gitlab
  572  http://gitlab.localhost:30080
  573  kubectl delete application gitlab -n argocd
  574  make bonus-gitlab
  575  watch kubectl get pods -n gitlab
  576  make clean
  577  make
  578  kubectl delete application gitlab -n argocd
  579  make
  580  watch kubectl get pods -n gitlab
  581  kubectl get pods -n gitlab
  582  make bonus-gitlab
  583  make bonus-status
  584  make clean
  585  kubectl delete application gitlab -n argocd
  586  make 
  587  make bonus-status
  588  kubectl delete application gitlab -n argocd
  589  make 
  590  make bonus-status
  591  watch kubectl get pods -n gitlab
  592  kubectl get all -n gitlab
  593  kubectl logs gitlab-nginx-ingress-controller-8599bb6464-tvjgv -n gitlab
  594  kubectl describe pod gitlab-nginx-ingress-controller-8599bb6464-tvjgv -n gitlab
  595  kubectl get svc -A | grep -E "30080|30443"
  596  kubectl get namespace gitlab
  597  kubectl get all -n gitlab
  598  ls
  599  cd Documents/
  600  cd IoT/
  601  ls
  602  cd p3
  603  make
  604  make clean
  605  make
  606  cd ..
  607  cd bonus/
  608  make
  609  make bonus-status
  610  kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 -d
  611  make decribe
  612  make describe
  613  kubectl delete application gitlab -n argocd
  614  make
  615  make clean
  616  	kubectl delete application gitlab -n argocd
  617  kubectl delete namespace gitlab
  618  kubectl get pods -n gitlab
  619  make
  620  make clean
  621  make
  622  make clean
  623  kubectl delete job gitlab-issuer-13a2249 -n gitlab --ignore-not-found
  624  kubectl delete jobs -n gitlab -l app.kubernetes.io/component=certmanager
  625  kubectl delete certificates -n gitlab --all
  626  kubectl delete certificaterequests -n gitlab --all
  627  make clean
  628  make
  629  make clean
  630  make
  631  kubectl get jobs -n gitlab
  632  make clean
  633  kubectl get jobs -n gitlab
  634  kubectl delete jobs --all -n gitlab
  635  make
  636  make celan
  637  make clean
  638  kubectl delete namespace gitlab --ignore-not-found=true
  639  kubectl get pvc -n gitlab
  640  # Voir les finalizers
  641  kubectl get pvc -n gitlab -o yaml | grep -A5 finalizers
  642  kubectl get pods -n gitlab
  643  kubectl get pods
  644  make clean
  645  make
  646  make clean
  647  make
  648  make clean
  649  make
  650  kubectl logs gitlab-nginx-ingress-controller-8599bb6464-vvdwf -n gitlab -c controller
  651  kubectl logs gitlab-nginx-ingress-controller-8599bb6464-vvdwf -n gitlab -c controller --previous
  652  kubectl describe pod gitlab-nginx-ingress-controller-8599bb6464-vvdwf -n gitlab
  653  make clean
  654  make
  655  make clean
  656  make
  657  make clean
  658  make
  659  kubectl logs -n gitlab gitlab-nginx-ingress-controller-f7c6c897-248t5 -c controller
  660  kubectl describe pod -n gitlab gitlab-nginx-ingress-controller-f7c6c897-248t5
  661  kubectl get svc -n gitlab | grep gitlab-shell
  662  kubectl get svc -n gitlab
  663  kubectl get svc -n gitlab gitlab-nginx-ingress-controller
  664  make clean
  665  make
  666  kubectl logs -n gitlab gitlab-nginx-ingress-controller-77bd7dd49b-25rxx -c controller
  667  kubectl get svc -n gitlab | grep nginx
  668  make clean
  669  make
  670  kubectl get svc -n gitlab | grep nginx
  671  make clean
  672  make
  673  make clean
  674  history
  675  kubectl port-forward svc/argocd-server -n argocd 8080:443
  676  cd Documents/
  677  cd IoT/
  678  cd bonus/
  679  make clean
  680  make
  681  make clean
  682  kubectl get namespace gitlab
  683  kubectl get namespace gitlab -o json | jq 'del(.spec.finalizers)' > tmp-gitlab-ns.json
  684  kubectl replace --raw "/api/v1/namespaces/gitlab/finalize" -f ./tmp-gitlab-ns.json
  685  kubectl get namespace gitlab
  686  kubectl get namespace gitlab -o json > gitlab-namespace.json
  687  nano gitlab-namespace.json
  688  kubectl get namespace gitlab
  689  cat gitlab-namespace.json
  690  kubectl get namespace gitlab
  691  watch kubectl get namespace gitlab
  692  kubectl replace --raw "/api/v1/namespaces/gitlab/finalize" -f ./gitlab-namespace.json
  693  kubectl get namespaces
  694  clear
  695  make
  696  watch kubectl get namespace gitlab
  697  watch -n 10 kubectl get pods -n gitlab
  698  cat gitlab-application.yaml 
  699  cat /etc/hosts
  700  make clean
  701  cd Documents/
  702  cd IoT/
  703  cd p3
  704  make clean
  705  make
  706  make clean
  707  make
  708  make clean
  709  make
  710  history | grep watch
  711  history | grep port-forward
  712  kubectl port-forward svc/gitlab-webservice-default 8443:8080 -n gitlab
  713  make clean
  714  history
  715  history | grep helm
  716  cd Documents/
  717  cd io
  718  cd IoT/
  719  ls
  720  cd bonus
  721  history > history.txt
